#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project configuration
PROJECT_NAME="startup-production-stack"
TERRAFORM_DIR="terraform"

echo -e "${BLUE}"
echo "🚀 Setting up $PROJECT_NAME"
echo "=================================="
echo -e "${NC}"

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if running from correct directory
if [ ! -f "README.md" ] || [ ! -d "$TERRAFORM_DIR" ]; then
    print_error "Please run this script from the project root directory"
    exit 1
fi

print_status "Checking prerequisites..."

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    print_error "AWS CLI is not installed. Please install it first:"
    echo "  https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check if Terraform is installed
if ! command -v terraform &> /dev/null; then
    print_error "Terraform is not installed. Please install it first:"
    echo "  https://developer.hashicorp.com/terraform/downloads"
    exit 1
fi

# Check Terraform version
TERRAFORM_VERSION=$(terraform version -json | jq -r '.terraform_version')
REQUIRED_VERSION="1.5.0"
if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$TERRAFORM_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
    print_error "Terraform version $TERRAFORM_VERSION is too old. Please upgrade to $REQUIRED_VERSION or later."
    exit 1
fi

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    print_warning "kubectl is not installed. You'll need it to manage your EKS cluster."
    echo "  Install it from: https://kubernetes.io/docs/tasks/tools/"
fi

print_status "Prerequisites check passed!"

# Check AWS credentials
print_status "Checking AWS credentials..."
if ! aws sts get-caller-identity &> /dev/null; then
    print_error "AWS credentials not configured. Please run:"
    echo "  aws configure"
    exit 1
fi

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
AWS_REGION=$(aws configure get region)
print_status "Connected to AWS Account: $AWS_ACCOUNT_ID in region: $AWS_REGION"

# Create terraform.tfvars if it doesn't exist
TFVARS_FILE="$TERRAFORM_DIR/terraform.tfvars"
if [ ! -f "$TFVARS_FILE" ]; then
    print_status "Creating terraform.tfvars file..."
    
    # Get user email from git config or prompt
    USER_EMAIL=$(git config user.email 2>/dev/null || echo "")
    if [ -z "$USER_EMAIL" ]; then
        read -p "Enter your email address: " USER_EMAIL
    fi
    
    # Get project name or use default
    read -p "Enter project name (default: my-startup): " INPUT_PROJECT_NAME
    PROJECT_NAME_VAR=${INPUT_PROJECT_NAME:-my-startup}
    
    # Get environment or use default
    read -p "Enter environment (default: dev): " INPUT_ENVIRONMENT
    ENVIRONMENT_VAR=${INPUT_ENVIRONMENT:-dev}
    
    cat > "$TFVARS_FILE" << EOF
# Generated by setup.sh on $(date)

# Required Variables
owner_email = "$USER_EMAIL"

# Project Configuration
project_name = "$PROJECT_NAME_VAR"
environment  = "$ENVIRONMENT_VAR"
aws_region   = "$AWS_REGION"

# VPC Configuration
vpc_cidr           = "10.0.0.0/16"
availability_zones = ["${AWS_REGION}a", "${AWS_REGION}b"]

# EKS Configuration
eks_cluster_version      = "1.27"
eks_node_instance_types  = ["t3.medium"]

# RDS Configuration
rds_instance_class    = "db.t3.micro"
rds_allocated_storage = 20
db_name              = "appdb"
db_username          = "dbadmin"
EOF
    
    print_status "Created $TFVARS_FILE"
else
    print_status "terraform.tfvars already exists"
fi

# Initialize Terraform
print_status "Initializing Terraform..."
cd "$TERRAFORM_DIR"

if terraform init; then
    print_status "Terraform initialized successfully!"
else
    print_error "Terraform initialization failed!"
    exit 1
fi

# Validate Terraform configuration
print_status "Validating Terraform configuration..."
if terraform validate; then
    print_status "Terraform configuration is valid!"
else
    print_error "Terraform configuration validation failed!"
    exit 1
fi

# Create Terraform plan
print_status "Creating Terraform plan..."
if terraform plan -out=tfplan; then
    print_status "Terraform plan created successfully!"
else
    print_error "Terraform plan creation failed!"
    exit 1
fi

cd ..

echo -e "${GREEN}"
echo "🎉 Setup completed successfully!"
echo "=================================="
echo -e "${NC}"
echo "Next steps:"
echo "1. Review the Terraform plan: cd terraform && terraform show tfplan"
echo "2. Deploy infrastructure: ./scripts/deploy.sh"
echo "3. Estimated monthly cost: ~\$150 (dev) / ~\$500 (prod)"
echo ""
echo "Configuration file created: $TFVARS_FILE"
echo "You can edit this file to customize your infrastructure."
